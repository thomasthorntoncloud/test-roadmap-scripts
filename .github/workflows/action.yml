name: Add Issue to Project Todo Column

on:
  issues:
    types:
      - opened

# jobs:
  # open-issue:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     issues: write
  #   steps:
  #     - run: |
  #         gh issue --repo ${{ github.repository }} \
  #           create --title "Issue title" --body "Issue body"
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    steps:
      - name: Add issue to project Todo column
        env:
          GITHUB_TOKEN: ${{ secrets.SECRET_PAT }}
          ISSUE_ID: ${{ github.event.issue.node_id }}
        run: |
         # Retrieve project ID
          PROJECT_ID=$(gh api graphql -f query='
            query($organization: String!, $number: Int!) {
              organization(login: $organization) {
                projectV2(number: $number) {
                  id
                }
              }
            }' -f organization="thomasthorntoncloud" -F number=1 --jq '.data.organization.projectV2.id')

          # Check if PROJECT_ID is set
          if [ -z "$PROJECT_ID" ]; then
            echo "Project ID could not be retrieved."
            exit 1
          fi

          # Retrieve issue ID from the event payload
          ISSUE_ID="${{ github.event.issue.node_id }}"

          # Check if ISSUE_ID is set
          if [ -z "$ISSUE_ID" ]; then
            echo "Issue ID could not be retrieved."
            exit 1
          fi

          # Add issue to project
          gh api graphql -f query='
            mutation($project: ID!, $issue: ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID || exit 1

          # Get the columns of the project
          columns=$(gh api graphql -f query='
            query($project: ID!) {
              node(id: $project) {
                ... on Project {
                  columns(first: 10) {
                    nodes {
                      id
                      name
                    }
                  }
                }
              }
            }' -f project=$PROJECT_ID --jq '.data.node.columns')

            # Extract the column ID for the desired column name
            COLUMN_NAME="Todo"
            COLUMN_ID=$(echo $columns | jq -r --arg COLUMN_NAME "$COLUMN_NAME" '.data.node.columns.nodes[] | select(.name == $COLUMN_NAME) | .id')

            # Move issue to the Todo column
            gh api graphql -f query='
              mutation($column: ID!, $issue: ID!) {
                moveProjectV2Item(input: {itemId: $issue, columnId: $column}) {
                  item {
                    id
                  }
                }
              }' -f column=$COLUMN_ID -f issue=$ISSUE_ID || exit 1

      - name: Confirm addition
        run: echo "Issue added to project successfully."