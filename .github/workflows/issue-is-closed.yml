name: Move Issue to Done When Closed

on:
  issues:
    types:
      - closed

jobs:
  move-to-done:
    runs-on: ubuntu-latest
    steps:
      - name: Move issue to Done
        env:
          GITHUB_TOKEN: ${{ secrets.SECRET_PAT }}
          ISSUE_ID: ${{ github.event.issue.node_id }}
          ORGANIZATION: thomasthorntoncloud
          PROJECT_ID: 1
        run: |
          # Retrieve project ID
          PROJECT_ID=$(gh api graphql -f query='
            query($organization: String!, $number: Int!) {
              organization(login: $organization) {
                projectV2(number: $number) {
                  id
                }
              }
            }' -f organization=ORGANIZATION -F number=$ISSUE_ID --jq '.data.organization.projectV2.id')


          echo "PROJECT_ID: $PROJECT_ID"

          # Get the Status field ID and Done option ID
          FIELD_DATA=$(gh api graphql -f query='
            query($project: ID!) {
              node(id: $project) {
                ... on ProjectV2 {
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f project=$PROJECT_ID --jq '.data.node.fields.nodes[] | select(.name == "Status")')

          STATUS_FIELD_ID=$(echo "$FIELD_DATA" | jq -r '.id')
          DONE_OPTION_ID=$(echo "$FIELD_DATA" | jq -r '.options[] | select(.name == "Done") | .id')

          echo "STATUS_FIELD_ID: $STATUS_FIELD_ID"
          echo "DONE_OPTION_ID: $DONE_OPTION_ID"

          # Find the item ID for the closed issue
          ITEM_ID=$(gh api graphql -f query='
            query($project: ID!) {
              node(id: $project) {
                ... on ProjectV2 {
                  items(first: 5000) {
                    nodes {
                      id
                      content {
                        ... on Issue {
                          id
                        }
                      }
                    }
                  }
                }
              }
            }
          ' -f project=$PROJECT_ID --jq '.data.node.items.nodes[] | select(.content.id == env.ISSUE_ID) | .id')

          echo "ITEM_ID: $ITEM_ID"

          if [ -z "$ITEM_ID" ]; then
            echo "Error: Could not find the issue in the project. Skipping status update."
            exit 0
          fi

          # Set the Status to Done
          RESULT=$(gh api graphql -f query='
            mutation($project: ID!, $item: ID!, $field: ID!, $value: String!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $field
                value: { 
                  singleSelectOptionId: $value
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f field=$STATUS_FIELD_ID -f value=$DONE_OPTION_ID)

          if echo "$RESULT" | jq -e '.data.updateProjectV2ItemFieldValue.projectV2Item.id' > /dev/null; then
            echo "Issue successfully moved to Done status."
          else
            echo "Error updating issue status: $RESULT"
            exit 1
          fi

      - name: Confirm status update
        if: success()
        run: echo "Issue moved to Done status successfully."