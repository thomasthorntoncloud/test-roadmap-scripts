name: Move Issue to Done When Closed

on:
  issues:
    types:
      - closed

jobs:
  move-to-done:
    runs-on: ubuntu-latest
    steps:
      - name: Move issue to Done
        env:
          GH_TOKEN: ${{ secrets.SECRET_PAT }}
          PROJECT_OWNER: thomasthorntoncloud
          PROJECT_NUMBER: 1
        run: |
          # Get project ID
          PROJECT_ID=$(gh project view $PROJECT_NUMBER --owner $PROJECT_OWNER --format json | jq -r '.id')
          echo "Project ID: $PROJECT_ID"

          FIELDS=$(gh project field-list $PROJECT_NUMBER --owner $PROJECT_OWNER --format json)
          echo "All fields:"
          echo "$FIELDS" | jq '.'

          STATUS_FIELD=$(echo "$FIELDS" | jq -r '.fields[] | select(.name == "Status")')
          STATUS_FIELD_ID=$(echo "$STATUS_FIELD" | jq -r '.id')
          DONE_OPTION_ID=$(echo "$STATUS_FIELD" | jq -r '.options[] | select(.name == "Done") | .id')
          
          echo "STATUS_FIELD_ID: $STATUS_FIELD_ID"
          echo "DONE_OPTION_ID: $DONE_OPTION_ID"

          # Find the item ID for the closed issue, accommodating more than 100 items
          ITEM_ID=""
          CURSOR=""
          ISSUE_NUMBER="${{ github.event.issue.number }}"

          while [ -z "$ITEM_ID" ]; do
            echo "Fetching items with cursor: $CURSOR"
            ITEMS_RESPONSE=$(gh project item-list $PROJECT_NUMBER --owner $PROJECT_OWNER --format json --limit 100 ${CURSOR:+--cursor "$CURSOR"})
            
            # Extract the item ID if the issue is found
            ITEM_ID=$(echo "$ITEMS_RESPONSE" | jq -r --arg ISSUE_NUMBER "$ISSUE_NUMBER" '.items[] | select(.content.number == ($ISSUE_NUMBER | tonumber)) | .id')
            
            if [ -n "$ITEM_ID" ]; then
              echo "Item found with ID: $ITEM_ID"
              break
            fi
            
            # Check if there are more pages
            HAS_NEXT_PAGE=$(echo "$ITEMS_RESPONSE" | jq -r '.pageInfo.hasNextPage')
            CURSOR=$(echo "$ITEMS_RESPONSE" | jq -r '.pageInfo.endCursor')
            
            if [ "$HAS_NEXT_PAGE" != "true" ] || [ "$CURSOR" = "null" ]; then
              echo "No more pages to fetch"
              break
            fi
          done

          if [ -z "$ITEM_ID" ]; then
            echo "Error: Could not find the issue in the project. Skipping status update."
            exit 0
          fi

          echo "ITEM_ID: $ITEM_ID"


          #   # Find the item ID for the closed issue, accommodating more than 100 items
          #   ITEM_ID=$(gh api graphql -f query='
          #   query($project: ID!) {
          #     node(id: $project) {
          #     ... on ProjectV2 {
          #       items(first: 100) {
          #       pageInfo {
          #         hasNextPage
          #         endCursor
          #       }
          #       nodes {
          #         id
          #         content {
          #         ... on Issue {
          #           id
          #         }
          #         }
          #       }
          #       }
          #     }
          #     }
          #   }' -f project=$PROJECT_ID --jq '.data.node.items.nodes[] | select(.content.id == env.ISSUE_ID) | .id')

          #   # If not found, paginate through the rest of the items
          #   while [ -z "$ITEM_ID" ] && [ "$(echo "$PAGE_INFO" | jq -r '.hasNextPage')" == "true" ]; do
          #   PAGE_INFO=$(gh api graphql -f query='
          #     query($project: ID!, $cursor: String!) {
          #     node(id: $project) {
          #       ... on ProjectV2 {
          #       items(first: 100, after: $cursor) {
          #         pageInfo {
          #         hasNextPage
          #         endCursor
          #         }
          #         nodes {
          #         id
          #         content {
          #           ... on Issue {
          #           id
          #           }
          #         }
          #         }
          #       }
          #       }
          #     }
          #     }' -f project=$PROJECT_ID -f cursor=$(echo "$PAGE_INFO" | jq -r '.endCursor') --jq '.data.node.items.pageInfo')

          #   ITEM_ID=$(gh api graphql -f query='
          #     query($project: ID!, $cursor: String!) {
          #     node(id: $project) {
          #       ... on ProjectV2 {
          #       items(first: 100, after: $cursor) {
          #         nodes {
          #         id
          #         content {
          #           ... on Issue {
          #           id
          #           }
          #         }
          #         }
          #       }
          #       }
          #     }
          #     }' -f project=$PROJECT_ID -f cursor=$(echo "$PAGE_INFO" | jq -r '.endCursor') --jq '.data.node.items.nodes[] | select(.content.id == env.ISSUE_ID) | .id')
          #   done

          # echo "ITEM_ID: $ITEM_ID"

          # if [ -z "$ITEM_ID" ]; then
          #   echo "Error: Could not find the issue in the project. Skipping status update."
          #   exit 0
          # fi

          # # Set the Status to Done
          # RESULT=$(gh api graphql -f query='
          #   mutation($project: ID!, $item: ID!, $field: ID!, $value: String!) {
          #     updateProjectV2ItemFieldValue(input: {
          #       projectId: $project
          #       itemId: $item
          #       fieldId: $field
          #       value: { 
          #         singleSelectOptionId: $value
          #       }
          #     }) {
          #       projectV2Item {
          #         id
          #       }
          #     }
          #   }' -f project=$PROJECT_ID -f item=$ITEM_ID -f field=$STATUS_FIELD_ID -f value=$DONE_OPTION_ID)

          # if echo "$RESULT" | jq -e '.data.updateProjectV2ItemFieldValue.projectV2Item.id' > /dev/null; then
          #   echo "Issue successfully moved to Done status."
          # else
          #   echo "Error updating issue status: $RESULT"
          #   exit 1
          # fi


      - name: Confirm status update
        if: success()
        run: echo "Issue moved to Done status successfully."